#!/usr/bin/env bash

function vol() {
  local device="$1"
  local retries=5
  local wait_time=0.3
  local output

  for ((i = 0; i < retries; i++)); do
    output=$(wpctl get-volume @DEFAULT_"$device"@ 2>/dev/null) && break
    sleep "$wait_time"
  done

  if [[ "$output" =~ ([0-9]*\.[0-9]+) ]]; then
    awk -v vol="${BASH_REMATCH[1]}" 'BEGIN{print int(vol * 100)}'
  else
    echo 0
  fi
}

function is_muted() {
  wpctl get-volume @DEFAULT_"$1"@ | rg -qi muted
}

function set_vol() {
  wpctl set-volume @DEFAULT_"$1"@ "$(awk -v n="$2" 'BEGIN{print (n / 100)}')"
}

function set_mute() {
  wpctl set-mute @DEFAULT_"$1"@ toggle
}

function get_sink() {
  sink_vol=$(vol "SINK")
  if is_muted "SINK"; then
    sink_vol=0
  fi
}

function get_source() {
  source_vol=$(vol "SOURCE")
  if is_muted "SOURCE"; then
    source_vol=0
  fi
}

function gen_output() {
  if [[ "$event" == *source* ]]; then
    get_source
  else
    get_sink
  fi
  jaq --null-input -r -c \
    --arg sink_vol "$sink_vol" \
    --arg source_vol "$source_vol" \
    '{"sink_vol": $sink_vol, "source_vol": $source_vol}'
}

case "$1" in
"mute")
  if [ "$2" != "SOURCE" ] && [ "$2" != "SINK" ]; then
    echo "Can only mute SINK or SOURCE"
    exit 1
  fi
  set_mute "$2"
  ;;

"set_vol")
  if [ "$2" != "SOURCE" ] && [ "$2" != "SINK" ]; then
    echo "Can only set volume for SINK or SOURCE"
    exit 1
  elif [ "$3" -lt 0 ] || [ "$3" -gt 100 ]; then
    echo "Volume must be between 0 and 100"
    exit 1
  fi
  set_vol "$2" "$3"
  ;;

"")
  # initial values
  get_sink
  get_source
  gen_output

  # event loop
  pactl subscribe | rg --line-buffered ".*(source|sink).*" | while read -r event; do
    gen_output
  done
  ;;

*)
  echo "wrong usage"
  ;;
esac
